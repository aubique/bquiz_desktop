import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import javax.swing.event.ListSelectionEvent;
import javax.swing.event.ListSelectionListener;
import java.awt.*;
import java.util.Random;

public class QuestionListForm {
    private JPanel questionListPanel = new JPanel();
    private JList<Question> questionList = new JList<>();
    private JScrollPane listScroller = new JScrollPane(questionList);
    private JButton followButton;
    private JButton exitButton;
    private JLabel answerLabel;

    private DefaultListModel<Question> model = new DefaultListModel<>();

    public QuestionListForm() {
        JFrame frame = new DrawFrame("List of questions", questionListPanel);
        addDefaultElements();
        questionList.getSelectionModel().addListSelectionListener(new ListSelectionHandler());
        exitButton.addActionListener(e -> System.exit(0));
//        followButton.addActionListener(MenuEditQuestion::new);
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(QuestionListForm::new);
    }

    private static Question getRandomQuestion() {
        Random randomizier = new Random();
        int rand = randomizier.nextInt(5000);
        return new Question(
                "Q" + rand,
                "CA" + rand,
                new String[]{
                        "1A" + rand,
                        "2A" + rand,
                        "3A" + rand
                }
        );
    }

    private void addDefaultElements() {
        questionList.setModel(model);
        for (int i = 0; i < 5; i++) {
            model.addElement(getRandomQuestion());
        }
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        questionListPanel = new JPanel();
        questionListPanel.setLayout(new GridLayoutManager(3, 2, new Insets(0, 0, 0, 0), -1, -1));
        listScroller = new JScrollPane();
        questionListPanel.add(listScroller, new GridConstraints(0, 0, 1, 2, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        questionList = new JList();
        questionList.setLayoutOrientation(0);
        questionList.setSelectionMode(0);
        listScroller.setViewportView(questionList);
        answerLabel = new JLabel();
        answerLabel.setText("Answer");
        questionListPanel.add(answerLabel, new GridConstraints(1, 0, 1, 2, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_NONE, GridConstraints.SIZEPOLICY_FIXED, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        followButton = new JButton();
        followButton.setText("Follow");
        questionListPanel.add(followButton, new GridConstraints(2, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
        exitButton = new JButton();
        exitButton.setText("Exit");
        questionListPanel.add(exitButton, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_HORIZONTAL, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, null, 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return questionListPanel;
    }

    class ListSelectionHandler implements ListSelectionListener {

        @Override
        public void valueChanged(ListSelectionEvent event) {
            Question selectedQuestion = questionList.getSelectedValue();
            answerLabel.setText("Correct answer: " + selectedQuestion.getCorrectAnswer());
        }
    }

}
